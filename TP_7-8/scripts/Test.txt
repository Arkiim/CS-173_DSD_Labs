SIGNAL s_current_time : unsigned(8 DOWNTO 0);
SIGNAL s_next_time : unsigned(8 DOWNTO 0);
s_current_sec_passed : unsigned(8 DOWNTO 0);
SIGNAL s_next_sec_passed : unsigned(8 DOWNTO 0);
SIGNAL cycle_time_custom : unsigned(8 DOWNTO 0);
SIGNAL r1 : unsigned(8 DOWNTO 0) := to_unsigned(50, 9);
SIGNAL r2 : unsigned(8 DOWNTO 0) := to_unsigned(50, 9) + t1 + t2 + ty + ty;
SIGNAL d : unsigned(8 DOWNTO 0) := to_unsigned(50, 9) + t1 + t2 + ty + ty + to_unsigned(10, 9);


s_next_time <= to_unsigned(0, 9) WHEN (s_current_time + 1) >= d ELSE
(s_current_time + 1);
s_next_sec_passed <= to_unsigned(0, 9) WHEN (s_next_time = r1 OR s_next_time = r2) ELSE
s_current_sec_passed + 1;

counter_async : PROCESS (clk, reset, s_current_time, s_current_sec_passed)
BEGIN
IF (reset = '1') THEN
s_current_time <= to_unsigned(0, 9);
s_current_sec_passed <= to_unsigned(0, 9);
L1_green <= '0';
L2_green <= '0';
L3_green <= '0';
L4_green <= '0';

L1_yellow <= '0';
L2_yellow <= '0';

L1_red <= '0';
L2_red <= '0';
L3_red <= '0';
L4_red <= '0';
ELSIF rising_edge(clk) THEN
s_current_time <= s_next_time;
s_current_sec_passed <= s_next_sec_passed;
END IF;
END PROCESS counter_async;
cycle_time_custom <= s_current_sec_passed;
		
